let User,hashPassword,comparePassword;_c6c‍.x([["register",()=>register]]);_c6c‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_c6c‍.w("../utils/auth",[["hashPassword",["hashPassword"],function(v){hashPassword=v}],["comparePassword",["comparePassword"],function(v){comparePassword=v}]]);


       const register = async (req, res) => {
  try {
    // console.log(req.body);
    const { name, email, password } = req.body;
    // validation
    if (!name) return res.status(400).send("Name sholud not be empty");
    if (password.length < 6) {
      return res
        .status(400)
        .send("Password should contain min 6 characters");
    }
    let userExist = await User.findOne({ email }).exec();
    if (userExist) return res.status(400).send("Email is already existing in database");

    // hash password
    const hashedPassword = await hashPassword(password);

    // register
    const user = new User({
      name,
      email,
      password: hashedPassword,
    });
    await user.save();
    return res.status(200).send("Registration successfull");

  } catch (err) {
    _c6c‍.g.console.log(err);
    return res.status(400).send("Error. Try again.", err);
  }
};
